package parsers.common;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import components.Utilities;
import models.MessageCA;
import models.ModelCdpp;
import models.PaletteBucket;

public class Val {

	public static List<MessageCA> Parse(InputStream val, ModelCdpp model) throws IOException {
		// (0,0,0)=100
		ArrayList<MessageCA> messages = new ArrayList<MessageCA>();
		
		Utilities.ReadFile(val, (String l) -> {
			// probably empty line
			if (l.isBlank() || l.length() < 4) return;

			if (!l.startsWith("[")) throw new RuntimeException("File format does not correspond to a type A palette.");
			
			int cI = l.indexOf('('); // coordinate start
			int cJ = l.indexOf(')'); // coordinate end
			int vI = l.indexOf('='); // value start
			
			String[] c = l.substring(cI + 1, cJ).replaceAll("\\s+", "").split(",");
						
			Integer[] coord = Arrays.asList(c).stream().toArray(s -> Integer.parseInt(s));
					
			
			var value = Float.parseFloat(l.substring(vI + 1));
			
			messages.add(new MessageCA("00:00:00:000", model.name, coord, "out", value));
		});
		
		return palette;
	}
	
	/*
	 
	ParseValFile(file) {
		var data = [];

		// Each line looks like this: (y,x,z)=value
		file.trim().split(/\n/).forEach(function(line) {
			line = line.trim();
			
			if (line.length < 4) return; // probably empty line
			
			var cI = line.indexOf('('); // coordinate start
			var cJ = line.indexOf(')'); // coordinate end
			var vI = line.indexOf('='); // value start
			
			var c = line.substring(cI + 1, cJ).replace(/\s/g, "").split(",").map(d => +d);

			var value = parseFloat(line.substr(vI + 1));
			
			data.push(new TransitionCA("00:00:00:000", null, c, "out", value));
		}.bind(this));
		
		return data;
	}
	 
	 * */
}
