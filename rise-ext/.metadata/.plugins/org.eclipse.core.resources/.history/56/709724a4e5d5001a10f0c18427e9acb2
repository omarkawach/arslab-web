package shared;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import components.Utilities;
import models.InitialRowValues;
import models.Link;
import models.Model;
import models.ModelCdpp;
import models.Port;

public class Ma {

	private static ModelCdpp current;
	
	public static List<ModelCdpp> Parse(InputStream ma) throws IOException {
		ArrayList<ModelCdpp> models = new ArrayList<ModelCdpp>();
		ArrayList<Link> links = new ArrayList<Link>();
		ArrayList<String> ignore = new ArrayList<String>();
				
		Utilities.ReadFile(ma, (String l) -> {
			l = l.trim().toLowerCase();
			
			if (l.startsWith("[")) {
				String name = l.substring(1, l.length() - 1);
				
				if (ignore.contains(name)) return; 
				
				current = new ModelCdpp(name);
				
				models.add(current);
				
				return;
			}
			
			String left = l.split(":")[0].trim();
			String right = l.split(":")[1].trim();

			if (left.equals("components")) {
				// components : sender@Sender
				current.submodels.add(right.split("@")[0]);
			}

			else if (left.equals("link")) {
				// Link : dataOut@sender in1@Network
				String[] ports = right.split("\\s+");
				String[] lPort = ports[0].split("@");
				String[] rPort = ports[1].split("@");
				
				Link link = new Link();
				
				link.modelA = lPort.length == 1 ? current.name : lPort[1];
				link.portA = lPort[0];
				link.portB = rPort[0];
				link.modelB = rPort.length == 1 ? current.name : rPort[1];
				
				links.add(link);
			}
			
			else if (left.equals("dim")) {
				// dim : (30,30)
				String[] dim = right.substring(1, right.length() - 1).split(",|, ");
				
				current.size = Arrays.stream(dim).mapToInt(i -> Integer.parseInt(i)).toArray();
				
				if (current.size.length == 2) current.size[2] = 1;
			}
			
			else if (left.equals("height")) current.size[0] = Integer.parseInt(right);
			
			else if (left.equals("width")) current.size[1] = Integer.parseInt(right);
			
			else if (left.equals("neighborports")) {
				// NeighborPorts: scenario1 scenario2 scenario3 scenario4
				current.ports = Arrays.stream(right.split(" "))
									  .map(p -> new Port(p, "output"))
									  .collect(Collectors.toList());
			}
			
			else if (left.equals("initialvalue")) {
				// initialvalue : 0
				current.initialValue = Float.parseFloat(l.split(" ")[2]);
			}
			
			else if (left.equals("initialrowvalue")) {
				InitialRowValues rv = new InitialRowValues();
				
				String[] split = l.split("\\s+");
				
				rv.row = Integer.parseInt(split[2]);
				
				List<Integer> values = new ArrayList<Integer>();
				
				for (int i = 0; i < split[3].length(); i++){
				    char c = split[3].charAt(i);        

					rv.values.add(Character.getNumericValue(c));
				}
				
				current.initialRowValues.add(rv);								
			}
			
			else if (left.equals("localtransition") || left.equals("zone")) {
				ignore.add(l.split("\\s")[2]);
			}
		});
		
		links.forEach((Link l) -> {
			Model mA = models.stream()
							 .filter((Model m) -> m.name.equals(l.modelA))
							 .findFirst()
							 .orElse(null);
			
			Port pA = mA.ports.stream()
							  .filter((Port p) -> p.name.equals(l.portA))
							  .findFirst()
							  .orElse(null);
			
			if (pA == null) mA.ports.add(new Port(l.portA, "output"));
			
			Model mB = models.stream()
							 .filter((Model m) -> m.name.equals(l.modelB))
							 .findFirst()
							 .orElse(null);
			
			
			Port pB = mB.ports.stream()
							  .filter((Port p) -> p.name.equals(l.portB))
							  .findFirst()
							  .orElse(null);
			
			if (pB == null) mB.ports.add(new Port(l.portB, "input"));
			
			mA.links.add(new Link(l.modelA, l.portA, l.modelB, l.portB));
		});
		
		return models;
	}
	
	private static void ReadModelLine(String right) {
		
	}
}
