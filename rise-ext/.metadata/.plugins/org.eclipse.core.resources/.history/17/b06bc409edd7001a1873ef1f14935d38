package parsers.cdpp;

import java.io.IOException;
import java.io.InputStream;
import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import components.Utilities;
import models.Message;
import models.MessageCA;
import models.Model;
import models.Parsed;
import models.Simulation;
import shared.Ma;

public class Devs {

	private static List<Message> messages;
		
	public static Parsed Parse(String name, InputStream ma, InputStream log)  throws IOException {		
		List<? extends Model> models = Ma.Parse(ma);
		
		Simulation sim = new Simulation(name, "Cell-DEVS", "CDpp", models);
		
		messages = ParseLog(models, log);
		
		return new Parsed(sim, messages);
	}
		
	private static List<Message> ParseLog(List<? extends Model> models, InputStream log) throws IOException {		
		Utilities.ReadFile(log, (String l) -> {
			// Mensaje Y / 00:00:20:000 / top(01) / packetsent /      1.00000 para Root(00)
			 String[] split = Arrays.stream(l.split("/")).map(s -> s.trim()).toArray(String[]::new);
			
			/*
			 * 
			var split = chunk.substr(start, length).split('/');
			var start = chunk.indexOf('Mensaje Y', start + length);

			// Parse coordinates, state value & frame timestamp
			// NOTE : Don't use regex, it's super slow.
			var tmp1 = split[2].trim().split("(");
			var tmp2 = split[4].trim().split(" ");
			
			var m = tmp1[0];					// model name
			
			if (this.ModelType(m) == 'coupled') continue;
			
			var t = split[1].trim();			// time
			var c = tmp1[1].slice(0, -1);		// id / coordinate
			var p = split[3].trim();			// port
			var v = parseFloat(split[4]);		// value
			
			parsed.push(new TransitionDEVS(t, m, p, v));
			 * 
			 * */
			
			
			/*
			 * // Mensaje Y / 00:00:05:000 / lug(9,35,0)(1873) / out / 101.00000 para
			 * lug(02) // probably empty line if (!l.startsWith("Mensaje Y")) return;
			 * 
			 * 
			 * 
			 * String[] tmp1 = split[2].split("\\("); String[] tmp2 = tmp1[1].substring(0,
			 * tmp1[1].length() - 1).split(",");
			 * 
			 * String t = split[1]; // time String m = tmp1[0]; // model name; String p =
			 * split[3]; // port String v = split[4].split("\\s+")[0];
			 * 
			 * int[] c = new int[3];
			 * 
			 * c[0] = Integer.parseInt(tmp2[0]); c[1] = Integer.parseInt(tmp2[1]); c[2] =
			 * (tmp2.length == 2) ? 0 : Integer.parseInt(tmp2[2]);
			 * 
			 * // Magic BigDecimal number = new BigDecimal(v);
			 * 
			 * v = number.stripTrailingZeros().toPlainString();
			 * 
			 * messages.add(new MessageCA(t, m, c, p, v));
			 */
		});
		
		return messages;
	}
}